<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 33d23851b05574b9ad0b2adcceb9d9ba713e9c6b Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->

<chapter xml:id="mongodb.architecture" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <titleabbrev>Arquitectura del controlador y sus entresijos</titleabbrev>
 <title>Explicación de la arquitectura del controlador y de características especiales</title>

 <section xml:id="mongodb.overview">
  <titleabbrev>Arquitectura</titleabbrev>
  <title>Vista general de la arquitectura</title>

  <para>
   Esta sección explica cómo todas las diferentes partes del controlador encajan
   entre sí, desde tiempos de ejecución de lenguaje diferentes, a través de extensiones y
   hacia las bibliotecas de PHP por último. Esta nueva arquitectura ha reemplazado a la antigua
   extensión <code>mongo</code>. Nos referiremos a la nueva
   como la extensión <code>mongodb</code>.
  </para>
  <para>
   <mediaobject>
    <alt>Diagrama de la arquitectura</alt>
    <imageobject>
     <imagedata fileref="es/reference/mongodb/images/driver_arch.png"/>
    </imageobject>
   </mediaobject>
  </para>
  <para>
   En lo más alto de esta pila se sitúa una
   <link xlink:href="&url.mongodb.library;">biblioteca de PHP</link> pura, la cual distribuimos
   como um paquete de Composer. Esta biblioteca proporcionará una API similar
   a la que los usuarios llevan esperando desde el controlador de mongo antiguo (p.ej. métodos CRUD,
   objetos de bases de datos y colecciones, ayudantes de comandos), por lo que esperamos que sea una
   dependencia común para la mayoría de las aplicaciones construidas con MongoDB. Esta biblioteca
   también implementa
   <link xlink:href="&url.mongodb.specs;">especificaciones</link> comunes, por el
   interés de mejorar la consistencia de la API a través de todos los
   <link xlink:href="&url.mongodb.drivers;">controladores</link> mantenidos por
   MongoDB (y con suerte, también algunos controladores de la comunidad).
  </para>

  <para>
   Justo debajo de la biblioteca tenemos los controladores de nivel más bajo: uno por plataforma.
   Estas extensiones formarán de forma efectiva el «pegamento» entre PHP y HHVM y nuestras
   bibliotecas del sistema (<link xlink:href="&url.mongodb.libmongoc;">libmongoc</link> y
   <link xlink:href="&url.mongodb.libbson;">libbson</link>). Estas extensiones
   expondrán una API pública idéntica para la funcionalidad más
   esencial y sensible al rendimiento:

   <simplelist>
    <member>Administración de conexiones</member>
    <member>Codificación y decodificación de BSON</member>
    <member>Serializacón documentos de objetos (para dar soporte a bibliotecas ODM)</member>
    <member>Ejecución de  comandos y escritura de operaciones</member>
    <member>Manejo de consultas y cursores</member>
   </simplelist>
  </para>

  <para>
   Al separar los entresijos del contrlador y la API de alto nivel en extensiones y
   bibliotecas de PHP, respectivamente, esperamos reducir nuestra carga de manteminiento y
   permitir una iteración más rápida en nuevas características. Como efecto secundario de agradecer, esto
   también hace más sencillo que cualquiera pueda contribuir al controlador. Además,
   una API pública idéntica para estas extensiones hará mucho más fácil
   portar una aplicación durante tiempos de ejecución de PHP, si la aplicación usa
   directamente el controlador de bajo nivel o una biblioteca de alto nivel.
  </para>
  <para>
   <link xlink:href="&url.mongodb.docs.gridfs;">GridFS</link> es un buen ejemplo
   de por qué elegimos esta dirección.
   Aunque implementamos GridFS en C para nuestro controlador antiguo de mongo, realmente es
   una especificación de alto nivel. Su API es una abstracción para
   acceder a dos colecciones: ficheros (esto es, metadatos) y trozos (esto es, bloques de
   datos). Asimismo, todo el añadido sintáctico encontrado en el controlador antiguo de mongo,
   como el procesamiento de ficheros subidos o la exposición de ficheros de GridFS como flujos de PHP,
   se puede implementar en PHP puro. Siempre que poseamos métodos rendidores para
   leer desde y escribir en colecciones de GridFS (y gracias a nuestras extensiones
   de bajo nivel), lo haremos: al mover esta API a PHP todos ganamos.
  </para>
  <para>
   Antes mencionamos que esperamos que la biblioteca de PHP sea una dependencia
   común para <emphasis>la mayoría</emphasis> de las aplicaciones, pero no para
   <emphasis>todas</emphasis>. Algunos usuarios podrían prefereir adherirse a la API sin
   florituras ofrecida por las extensiones, o crear su propia abstracción de alto nivel
   (parecida a <link xlink:href="&url.mongodb.doctrine;">Doctrine MongoDB</link> para
   el controlador antiguo de mongo). Las futuras bibliotecas podrían incluir una biblioteca de PHP dirigida
   a la administración de MongoDB con una API para la gestión de varios usuarios
   y comandos de operaciones. La siguiente versión mayor de
   <link xlink:href="&url.mongodb.doctrine-odm;">Doctrine MongoDB ODM</link>
   probablemente también se sitúe directamente el lo alto de esta extensiones.
  </para>
  <para>
   Aunque continuaremos manteniendo y dando soporte al controlador antiguo de mongo y a sus
   usuarios para el futuro próximo, invitamos a todo el mundo a utilizar el
   controlador de nueva generación y considerarlo para cualquier proyecto nuevo por venir.
   Los componentes esenciales se pueden encontrar a través de GitHub y JIRA:

   <table>
    <title>Ubicaciones del código fuente del controlador y JIRA</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Proyecto</entry>
       <entry>GitHub</entry>
       <entry>JIRA</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>Biblioteca de PHP</entry>
       <entry><link xlink:href="&url.mongodb.github.phplib;">mongodb/mongo-php-library</link></entry>
       <entry><link xlink:href="&url.mongodb.jira.phplib;">PHPLIB</link></entry>
      </row>
      <row>
       <entry>Controlador de PHP 5 y PHP 7 (phongo)</entry>
       <entry><link xlink:href="&url.mongodb.github.phpc;">mongodb/mongo-php-driver</link></entry>
       <entry><link xlink:href="&url.mongodb.jira.phpc;">PHPC</link></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>

  <para>
   El proyecto <link xlink:href="&url.mongodb.jira;">PHP</link> existente en JIRA
   permanecerá abierto para la notificación de errores del controlador antiguo de mongo, aunque
   solicitaremos que utilice los nuevos proyectos de antes para cualquier cosa concerniente a
   nuestros controladores de la siguiente generación.
  </para>
 </section>

 <section xml:id="mongodb.connection-handling">
  <titleabbrev>Connections</titleabbrev>
  <title>Connection handling and persistence</title>

  &mongodb.note.forking;

  <section>
   <title>Persistencia de conexión y topología (PHP y HHVM desde versión 1.2.0)</title>

   <para>
    Todas las versiones del controlador desde la 1.2.0 hacen persistente el
    objeto cliente <link xlink:href="&url.mongodb.libbson;">libmongoc</link> del
    proceso trabajador de PHP, lo que le permite reutilizar conexiones a bases de datos,
    estadod de autenticación, <emphasis>e</emphasis> información de topología entre
    varias peticiiones.
   </para>

   <para>
    Cuando <methodname>MongoDB\Driver\Manager::__construct</methodname> se
    invoca, se crea un hash con sus argumentos (esto es, cadena de URI y opciones
    de array). El controlador intentará encontrar un objeto cliente
    <link xlink:href="&url.mongodb.libbson;">libmongoc</link> persistente anterior par
    tal hash. Si no se puede encontrar un cliente existente  para el hash, se creará
    un nuevo cliente (y se hará persistente para un uso futuro).
   </para>

   <para>
    Cada cliente contiene su propia conexión a una base de datos y una vista de la topología
    del servidor (p.ej., independiente, conjunto réplica, 'clúster' fragmentado). Haciendo persistente
    el cliente entre peticiones de PHP, el controlador es capaz de reutilizar conexiones de bases
    de datos establecidas y eliminar la necesidad de
    <link xlink:href="&url.mongodb.sdam;">descubrir la topología del servidor</link>
    en cada petición.
   </para>

   <para>
    Considere el siguiente ejemplo:
   </para>

   <programlisting role="php">
<![CDATA[
<?php

$managers = [
    new MongoDB\Driver\Manager('mongodb://127.0.0.1'),
    new MongoDB\Driver\Manager('mongodb://127.0.0.1'),
    new MongoDB\Driver\Manager('mongodb://127.0.0.1:27017'),
    new MongoDB\Driver\Manager('mongodb://rs1.example.com,rs2.example.com/', ['replicaSet' => 'myReplicaSet']),
];

foreach ($managers as $manager) {
    $manager->executeCommand('test', new MongoDB\Driver\Command(['ping' => 1]));
}

?>
]]>
   </programlisting>

   <para>
    Los primeros dos objetos Manager compartirán el mismo cliente
    <link xlink:href="&url.mongodb.libbson;">libmongoc</link> ya que
    los argumentos de sus constructores son idénticos. El tercer y cuarto objetos
    utilizarán cada un su propio cliente. En total, se crearán tres clientes y el
    trabajador de PHP que ejecute este script abrirá dos conexiones a
    <literal>127.0.0.1</literal> y una conexión a
    <literal>rs1.example.com</literal> y otra a <literal>rs2.example.com</literal>.
    Si el controlador descubre miembros adicionales de un conjunto réplica después de emitir
    comandos <literal>isMaster</literal>, abrirá conexiones adicionales también
    para esos servidores.
   </para>

   <para>
    Si el mismo trabajador ejecuta el script de nuevo en una segunda petición, los tres
    clientes serán reutilizados y no deberían hacerse nuevas conexiones. Dependiendo del
    hace cuánto tiempo se sirvió la petición anteriior, el controlador podría necesitar emitir
    comandos <literal>isMaster</literal> adicionales para actualizar su vista de las
    topologías.
   </para>
  </section>

  <section>
   <title>Persistencia de socket (PHP versiones anteriores a la 1.2.0)</title>

   <para>
    Las versiones del controlador de PHP anteriores a la 1.2.0 utilizan la API de Flujos de PHP para
    conexiones a bases de datos, empleando una API dentro de
    <link xlink:href="&url.mongodb.libbson;">libmongoc</link> para designar
    manejadores propios para la comunicación de sockets. Sin embargo, se crea un nuevo cliente
    libmongoc para cada <classname>MongoDB\Driver\Manager</classname>. Como resultado,
    el controlador hace persistir conexiones a bases de datos individuales, aunque no el estado
    de autenticación o la información de la topología. Esto sifgnifica que el controlador necesita emitir
    comandos al inicio de cada petición para autenticar y
    <link xlink:href="&url.mongodb.sdam;">descubrir la topología del servidor</link>.
   </para>

   <para>
    Las conexiones a bases de datos son persistentes mediante un hash derivador del puerto,
    host y cadena URI del servidor empleados para construit el
    <classname>MongoDB\Driver\Manager</classname>. Las opciones de array del
    constructor no estan incluidas en este hash.
   </para>

   <note>
    <simpara>
     Las versiones del controlador &gt;= 1.1.8 y &lt; 1.2.0 no hacen persistentes sockets
     para conexinoes SSL. Véase
     <link xlink:href="&url.mongodb.jira.phpc;-720">PHPC-720</link> para
     más información.
    </simpara>
   </note>

   <para>
    A pesar de sus deficiencias con conexiones SSL persistentes e información de
    topología, esta versioón del controlador admite todas las
    <link linkend="context.ssl">opciones de contexto SSL</link> debido a que utiliza
    la API de Flujos de PHP.
   </para>
  </section>

  <section>
   <title>Sin persistencia (versiones de HHVM anteriores a la 1.2.0)</title>

   <para>
    Las versiones del controlador HHVM anteriores a la 1.2.0 no hacen persistentes sockets,
    estados de autenticación o información de topología, La comunicación de socket emplea
    <link xlink:href="&url.mongodb.libbson;">libmongoc</link> completamente.
   </para>
  </section>
 </section>

 <section xml:id="mongodb.persistence">
  <titleabbrev>Persistencia de datos</titleabbrev>
  <title>Serialización y deserialización de variables de PHP en MongoDB</title>

  <para>
   Este documento trata sobre los métodos de cómo las estructuras compuestas (documentos,
   arrays, objetos) se hacen persistentes a través de los controladores y de cómo son llevadas
   de vuelta a PHP.
  </para>

  <section xml:id="mongodb.persistence.serialization">
   <title>Serialización a BSON</title>

   <section>
    <title>Arrays</title>

    <para>
     Si un array es un <emphasis>array compacto</emphasis>, esto es, las claves empiezan
     en 0 y están en secuencia sin huecos: <emphasis>array BSON</emphasis>.
    </para>

    <para>
     Si el array no es compacto, esto es, tiene claves asociativas (string), las
     claves no comienzan en 0, o cuando hay huecos: <emphasis>objeto
     BSON</emphasis>
    </para>

    <para>
     Un documento del más alto nivel (raíz), <emphasis>siempre</emphasis> se serializa como un
     documento BSON.
    </para>

    <section>
     <title>Ejemplos</title>

     <para>
      Los siguientes arrays se serializan como arrays BSON:
     </para>

     <programlisting role="text">
<![CDATA[
[ 8, 5, 2, 3 ] => [ 8, 5, 2, 3 ]
[ 0 => 4, 1 => 9 ] => [ 4, 9 ]
]]>
     </programlisting>

     <para>
      Estos se serializan como documentos BSON:
     </para>

     <programlisting role="text">
<![CDATA[
[ 0 => 1, 2 => 8, 3 => 12 ] => { "0" : 1, "2" : 8, "3" : 12 }
[ "foo" => 42 ] => { "foo" : 42 }
[ 1 => 9, 0 => 10 ] => { "1" : 9, "0" : 10 }
]]>
     </programlisting>

     <para>
      Observe que los cinco ejemplos son <emphasis>fragmentos</emphasis> de un documento
      completo que representan solamente <emphasis>un</emphasis> valor dentro de un
      documento.
     </para>

    </section>
   </section>

   <section>
    <title>Objetos</title>

    <para>
     Si un objeto es de la clase <classname>stdClass</classname> se serializa
     como un <emphasis>documento BSON</emphasis>.
    </para>

    <para>
     Si un objeto es de una clase admitida que implementa
     <classname>MongoDB\BSON\Tipo</classname>, se utiliza la lógica de
     serialización BSON para un tipo específico.
     Las instancias de <classname>MongoDB\BSON\Tipo</classname> (excluyendo
     <classname>MongoDB\BSON\Serializable</classname> solo podrían ser serializadas
     como un valor de campo de documento. Intentar serializar tales objetos como un
     documento raíz lanzará una
     <classname>MongoDB\Driver\Exception\UnexpectedValueException</classname>
    </para>

    <para>
     Si un objeto se de una clase desconocida que implementa la
     interfaz <classname>MongoDB\BSON\Tipo</classname>, lanza una
     <classname>MongoDB\Driver\Exception\UnexpectedValueException</classname>
    </para>

    <para>
     Si un objeto es de cualquier otra clase que no implemente ninguna interfaz
     especial, se serializa como un <emphasis>documento BSON</emphasis>. Se mantienen solo
     las propiedades <emphasis>public</emphasis> y se ignoran
     las propiedades <emphasis>protected</emphasis> y
     <emphasis>private</emphasis>.
    </para>

    <para>
     Si un objeto es de una clase que implementa la
     interfaz <classname>MongoDB\BSON\Serializable</classname>, se llama a
     <methodname>MongoDB\BSON\Serializable::bsonSerialize</methodname> y se utiliza
     el array u objeto <classname>stdClass</classname> devuelto para serilizarlo como
     un documento BSON o array. El tipo BSON será determinado como sigue:
    </para>

    <para>
     <orderedlist>
      <listitem>
       <para>Los documentos raíz deben ser serializados como un documento
        BSON.
       </para>
      </listitem>
      <listitem>
       <para>Los objetos <classname>MongoDB\BSON\Persistable</classname> deben ser
        serializados como un documento BSON.
       </para>
      </listitem>
      <listitem>
       <para>
        Si <methodname>MongoDB\BSON\Serializable::bsonSerialize</methodname>
        devuelve un array compacto, se serializa como un array BSON.
       </para>
      </listitem>
      <listitem>
       <para>
        Si <methodname>MongoDB\BSON\Serializable::bsonSerialize</methodname>
        devuelve un array no compacto o un objeto <classname>stdClass</classname>,
        se serializa como un documento BSON.
       </para>
      </listitem>
      <listitem>
       <para>
        Si <methodname>MongoDB\BSON\Serializable::bsonSerialize</methodname>
        no devuelve un array u objeto <classname>stdClass</classname>, se lanza una
        excepción de tipo
        <classname>MongoDB\Driver\Exception\UnexpectedValueException</classname>.
       </para>
      </listitem>
     </orderedlist>
    </para>

    <para>
     Si un objeto es de una clase que implementa la
     interfaz <interfacename>MongoDB\BSON\Persistable</interfacename> (lo que implica que
     <interfacename>MongoDB\BSON\Serializable</interfacename> obtiene las propiedades
     de una forma similar a los párrafos anteriores, aunque
     <emphasis>también</emphasis> añade una propiedad adicional
     <property>__pclass</property> como un valor Binary, con subtipo
     <literal>0x80</literal> y datos soportando el nombre de la clase completamente cualificado
     del objeto que se está serializando.
    </para>

    <para>
     La propiedad <property>__pclass</property> se añade al array u
     objeto devuelto por
     <methodname>MongoDB\BSON\Serializable::bsonSerialize</methodname>, lo que
     significa que se sobrescribirá cualquier clave/propiedad <property>__pclass</property> en
     el valor devuelto de <methodname>MongoDB\BSON\Serializable::bsonSerialize</methodname>.
     Para evitar este funcionamiento y establecer un valor de
     <property>__pclass</property> propio, <emphasis>no</emphasis> se debe
     implementar <interfacename>MongoDB\BSON\Persistable</interfacename> y, en su lugar,
     se deería implementar <interfacename>MongoDB\BSON\Serializable</interfacename>
     directamente.
    </para>

    <section>
     <title>Ejemplos</title>

     <programlisting role="php">
<![CDATA[
<?php

class stdClass {
  public $foo = 42;
} // => { "foo" : 42 }

class MyClass {
  public $foo = 42;
  protected $prot = "wine";
  private $fpr = "cheese";
} // => { "foo" : 42 }

class AnotherClass1 implements MongoDB\BSON\Serializable {
  public $foo = 42;
  protected $prot = "wine";
  private $fpr = "cheese";
  function bsonSerialize() {
      return [ 'foo' => $this->foo, 'prot' => $this->prot ];
  }
} // => { "foo" : 42, "prot" : "wine" }

class AnotherClass2 implements MongoDB\BSON\Serializable {
  public $foo = 42;
  function bsonSerialize() {
      return $this;
  }
} // => MongoDB\Driver\Exception\UnexpectedValueException("bsonSerialize() did not return an array or stdClass")

class AnotherClass3 implements MongoDB\BSON\Serializable {
  private $elements = [ 'foo', 'bar' ];
  function bsonSerialize() {
      return $this->elements;
  }
} // => { "0" : "foo", "1" : "bar" }

class ContainerClass implements MongoDB\BSON\Serializable {
  public $things = AnotherClass4 implements MongoDB\BSON\Serializable {
    private $elements = [ 0 => 'foo', 2 => 'bar' ];
    function bsonSerialize() {
      return $this->elements;
    }
  }
  function bsonSerialize() {
      return [ 'things' => $this->things ];
  }
} // => { "things" : { "0" : "foo", "2" : "bar" } }

class ContainerClass implements MongoDB\BSON\Serializable {
  public $things = AnotherClass5 implements MongoDB\BSON\Serializable {
    private $elements = [ 0 => 'foo', 2 => 'bar' ];
    function bsonSerialize() {
      return array_values($this->elements);
    }
  }
  function bsonSerialize() {
      return [ 'things' => $this->things ];
  }
} // => { "things" : [ "foo", "bar" ] }

class ContainerClass implements MongoDB\BSON\Serializable {
  public $things = AnotherClass6 implements MongoDB\BSON\Serializable {
    private $elements = [ 'foo', 'bar' ];
    function bsonSerialize() {
      return (object) $this->elements;
    }
  }
  function bsonSerialize() {
      return [ 'things' => $this->things ];
  }
} // => { "things" : { "0" : "foo", "1" : "bar" } }

class UpperClass implements MongoDB\BSON\Persistable {
  public $foo = 42;
  protected $prot = "wine";
  private $fpr = "cheese";
  function bsonSerialize() {
      return [ 'foo' => $this->foo, 'prot' => $this->prot ];
  }
} // => { "foo" : 42, "prot" : "wine", "__pclass" : { "$type" : "80", "$binary" : "VXBwZXJDbGFzcw==" } }
]]>
     </programlisting>
    </section>
   </section>
  </section>

  <section xml:id="mongodb.persistence.deserialization">
   <title>Deserialización desde BSON</title>

   &mongodb.warning.duplicate-keys;

   <para>
    The legacy <code>mongo</code> extension deserialized
    both BSON documents and arrays as PHP arrays. While PHP arrays are
    convenient to work with, this behavior was problematic because different
    BSON types could deserialize to the same PHP value (e.g.
    <literal>{"0": "foo"}</literal> and <literal>["foo"]</literal>) and make it
    impossible to infer the original BSON type. By default, the current driver
    addresses this concern by ensuring that BSON arrays and documents are
    converted to PHP arrays and objects, respectively.
   </para>
   <para>
    Para tipos compuestos, existen tres tipos de datos:
   </para>

   <para>
    <variablelist>
     <varlistentry>
      <term>root</term>
      <listitem>
       <para>
        se refiere al documento BSON de más alto nivel <emphasis>solamente</emphasis>
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>document</term>
      <listitem>
       <para>
        se refiere a docuemtnos BSON embebidos <emphasis>solamente</emphasis>
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>array</term>
      <listitem>
       <para>
        se refiere a un array BSON
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

   <para>
    Besides the three collective types, it is also possible to configure
    specific fields in your document to map to the data types mentioned below.
    As an example, the following type map allows you to
    map each embedded document within an <literal>"addresses"</literal> array to
    an <classname>Address</classname> class <emphasis>and</emphasis> each
    <literal>"city"</literal> field within those embedded address documents to
    a <classname>City</classname> class:

    <programlisting role="text">
<![CDATA[
[
    'fieldPaths' => [
        'addresses.$' => 'MyProject\Address',
        'addresses.$.city' => 'MyProject\City',
    ],
]
]]>
    </programlisting>
   </para>

   <para>
    Cada uno de estos tres tipos de datos se pueden hacer corresponder con diferentes tipos de PHP.
    Los posibles valores de correspondencia son:
   </para>

   <para>
    <variablelist>
     <varlistentry>
      <term><emphasis>no establecido</emphasis> o <type>NULL</type> (es el
       predeterminado)</term>
      <listitem>
       <para>
        <itemizedlist>
         <listitem>
          <para>
           Un array BSON será deserializado como un <type>array</type> de PHP.
          </para>
         </listitem>
         <listitem>
          <para>
           Un documento BSON (raíz o embebido) sin una
           propiedad <property>__pclass</property>
           <footnote xml:id="mongodb.pclass">
            <para>
             Una propiedad __pclass solamente se considera que existe si
             existe una propiedad con ese nombre, y es un valor Binary,
             y el subtipo del valor Binary es 0x80. Si no se da alguna de
             estas tres condiciones, la propiedad __pclass no existe y
             debería ser tratada como otra propiedad normal.
            </para>
           </footnote>
           se convierte en un objeto <classname>stdClass</classname> de PHP, con cada
           clave de documento BSON establecida a propiedad <classname>stdClass</classname>
           pública.
          </para>
         </listitem>
         <listitem>
          <para>
           Un documento BSON (raíz o embebido) con una
           propiedad <property>__pclass</property> <footnoteref linkend="mongodb.pclass"/> se convierte en un objeto de PHP del
           nombre de la clase definida por la propiedad
           <property>__pclass</property>.
          </para>
          <para>
           Si la clase con nombre implementa la
           intefaz <classname>MongoDB\BSON\Persistable</classname>, las
           propiedades del documento BSON, incluyendo la
           propiedad <property>__pclass</property>, son enviadas como un array
           asociativo a la
           función <methodname>bsonUnserialize</methodname> para
           inicializar la propiedades del objeto.
          </para>
          <para>
           Si la clase con nombre no existe o no implementa la
           interfaz <classname>MongoDB\BSON\Persistable</classname>,
           se empleará <classname>stdClass</classname> y cada clave del documento
           BSON (incluyendo <property>__pclass</property>) será establecida a una
           propiedad <classname>stdClass</classname> pública.
          </para>
         </listitem>
        </itemizedlist>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"array"</literal></term>
      <listitem>
       <para>
        Convierte un array BSON o documento BSON en un array de PHP. No habrá
        ningún tratamiento especial de una propiedad <property>__pclass</property> <footnoteref linkend="mongodb.pclass"/>,
        aunque se podría establecer como un elemento del array devuelto si estaba
        presente el el documento BSON.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"object"</literal> o <literal>"stdClass"</literal></term>
      <listitem>
       <para>
        Convierte un array BSON o documento BSON a un
        objeto <classname>stdClass</classname>. No habrá ningún tratamiento
        especial de una propiedad <property>__pclass</property> <footnoteref linkend="mongodb.pclass"/>, aunque se podría
        establecer como propiedad pública del objeto devuelto si estaba presente
        en el documento BSON.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>cualquier otro string</term>
      <listitem>
       <para>
        Define el nombre de la clase a la que debe ser deserializado el array BSON
        u objeto BSON. Para objetos BSON que incluyan
        propiedades <property>__pclass</property>, esta clase tomará
        prioridad.
       </para>

       <para>
        Si la clase citada no existe, no es concreta (esto es, es
        abstracta o es una interfaz), o no implementa
        <classname>MongoDB\BSON\Unserializable</classname>, se lanzará
        una excepción
        <classname>MongoDB\Driver\Exception\InvalidArgumentException</classname>.
       </para>

       <para>
        Si el objeto BSON posee una propiedad <property>__pclass</property> y
        esa clase existe e implementa
        <classname>MongoDB\BSON\Persistable</classname>, sustituirá a la
        clase proporcionada en el mapa de tipo.
       </para>

       <para>
        Las propiedades del documento BSON, <emphasis>incluyendo</emphasis>
        la propiedad <property>__pclass</property> si existiera, será enviada
        como un array asociativo a la
        función <methodname>bsonUnserialize</methodname> para inicializar las
        propiedades del objeto.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

   <section xml:id="mongodb.persistence.typemaps">
    <title>TypeMaps</title>

    <para>
     TypeMaps se puede establecer a través del
     método <methodname>MongoDB\Driver\Cursor::setTypeMap</methodname> en un
     objeto <classname>MongoDB\Driver\Cursor</classname> o del
     argumento <literal>$typeMap</literal> de
     <function>MongoDB\BSON\toPHP</function>. Cada una de las tres
     clases (<emphasis>root</emphasis>, <emphasis>document</emphasis> and
     <emphasis>array</emphasis>) se pueden establecer individualmente.
    </para>

    <para>
     Si el valor del mapa es <type>NULL</type>, significa lo mismo que
     el valor <emphasis>predeterminado</emphasis> para ese elemento.
    </para>
   </section>

   <section>
    <title>Ejemplos</title>

    <para>
     Estos ejemplos utilizan las siguientes clases:
    </para>

    <para>
     <variablelist>
      <varlistentry>
       <term>MiClase</term>
       <listitem>
        <para>
         la cual <emphasis>no</emphasis> implementa ninguna interfaz
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>TuClase</term>
       <listitem>
        <para>
         que implementa <interfacename>MongoDB\BSON\Unserializable</interfacename>
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>NuestraClase</term>
       <listitem>
        <para>
         que implementa <interfacename>MongoDB\BSON\Persistable</interfacename>
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>SuClase</term>
       <listitem>
        <para>
         que extiende NuestraClase
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>

    <para>
     El método <methodname>MongoDB\BSON\Unserializable::bsonUnserialize</methodname>
     de TuClase, NuestraClase, SuClase recorre el array y establece las propiedades
     sin modificaciones. <emphasis>También</emphasis> establece la propiedad
     <literal>$unserialized</literal> a <literal>true</literal>:

     <programlisting role="php">
<![CDATA[
<?php

function bsonUnserialize( array $map )
{
    foreach ( $map as $k => $value )
    {
        $this->$k = $value;
    }
    $this->unserialized = true;
}
]]>
      </programlisting>
     </para>

    <para>
      <programlisting role="text">
<![CDATA[
/* typemap: [] (all defaults) */
{ "foo": "yes", "bar" : false }
  -> stdClass { $foo => 'yes', $bar => false }

{ "foo": "no", "array" : [ 5, 6 ] }
  -> stdClass { $foo => 'no', $array => [ 5, 6 ] }

{ "foo": "no", "obj" : { "embedded" : 3.14 } }
  -> stdClass { $foo => 'no', $obj => stdClass { $embedded => 3.14 } }

{ "foo": "yes", "__pclass": "MyClass" }
  -> stdClass { $foo => 'yes', $__pclass => 'MyClass' }

{ "foo": "yes", "__pclass": { "$type" : "80", "$binary" : "MyClass" } }
  -> stdClass { $foo => 'yes', $__pclass => Binary(0x80, 'MyClass') }

{ "foo": "yes", "__pclass": { "$type" : "80", "$binary" : "YourClass") }
  -> stdClass { $foo => 'yes', $__pclass => Binary(0x80, 'YourClass') }

{ "foo": "yes", "__pclass": { "$type" : "80", "$binary" : "OurClass") }
  -> OurClass { $foo => 'yes', $__pclass => Binary(0x80, 'OurClass'), $unserialized => true }

{ "foo": "yes", "__pclass": { "$type" : "44", "$binary" : "YourClass") }
  -> stdClass { $foo => 'yes', $__pclass => Binary(0x44, 'YourClass') }
]]>
      </programlisting>
     </para>

    <para>
      <programlisting role="text">
<![CDATA[
/* typemap: [ "root" => "MissingClass" ] */
{ "foo": "yes" }
  -> MongoDB\Driver\Exception\InvalidArgumentException("MissingClass does not exist")

/* typemap: [ "root" => "MyClass" ] */
{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "MyClass" } }
  -> MongoDB\Driver\Exception\InvalidArgumentException("MyClass does not implement Unserializable interface")

/* typemap: [ "root" => "MongoDB\BSON\Unserializable" ] */
{ "foo": "yes" }
  -> MongoDB\Driver\Exception\InvalidArgumentException("Unserializable is not a concrete class")

/* typemap: [ "root" => "YourClass" ] */
{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "MongoDB\BSON\Unserializable" } }
  -> YourClass { $foo => "yes", $__pclass => Binary(0x80, "MongoDB\BSON\Unserializable"), $unserialized => true }

/* typemap: [ "root" => "YourClass" ] */
{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "MyClass" } }
  -> YourClass { $foo => "yes", $__pclass => Binary(0x80, "MyClass"), $unserialized => true }

/* typemap: [ "root" => "YourClass" ] */
{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "OurClass" } }
  -> OurClass { $foo => "yes", $__pclass => Binary(0x80, "OurClass"), $unserialized => true }

/* typemap: [ "root" => "YourClass" ] */
{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "TheirClass" } }
  -> TheirClass { $foo => "yes", $__pclass => Binary(0x80, "TheirClass"), $unserialized => true }

/* typemap: [ "root" => "OurClass" ] */
{ foo: "yes", "__pclass" : { "$type": "80", "$binary": "TheirClass" } }
  -> TheirClass { $foo => "yes", $__pclass => Binary(0x80, "TheirClass"), $unserialized => true }
]]>
      </programlisting>
     </para>

     <para>
      <programlisting role="text">
<![CDATA[
/* typemap: [ 'root' => 'YourClass' ] */
{ foo: "yes", "__pclass" : { "$type": "80", "$binary": "YourClass" } }
  -> YourClass { $foo => 'yes', $__pclass => Binary(0x80, 'YourClass'), $unserialized => true }
]]>
      </programlisting>
     </para>

     <para>
      <programlisting role="text">
<![CDATA[
/* typemap: [ 'root' => 'array', 'document' => 'array' ] */
{ "foo": "yes", "bar" : false }
  -> [ "foo" => "yes", "bar" => false ]

{ "foo": "no", "array" : [ 5, 6 ] }
  -> [ "foo" => "no", "array" => [ 5, 6 ] ]

{ "foo": "no", "obj" : { "embedded" : 3.14 } }
  -> [ "foo" => "no", "obj" => [ "embedded => 3.14 ] ]

{ "foo": "yes", "__pclass": "MyClass" }
  -> [ "foo" => "yes", "__pclass" => "MyClass" ]

{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "MyClass" } }
  -> [ "foo" => "yes", "__pclass" => Binary(0x80, "MyClass") ]

{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "OurClass" } }
  -> [ "foo" => "yes", "__pclass" => Binary(0x80, "OurClass") ]
]]>
      </programlisting>
     </para>

     <para>
      <programlisting role="text">
<![CDATA[
/* typemap: [ 'root' => 'object', 'document' => 'object' ] */
{ "foo": "yes", "__pclass": { "$type": "80", "$binary": "MyClass" } }
  -> stdClass { $foo => "yes", "__pclass" => Binary(0x80, "MyClass") }
]]>
      </programlisting>
     </para>

   </section>
  </section>

 </section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
